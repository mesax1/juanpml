---
import { type CollectionEntry, render, getCollection } from "astro:content";
import TOC from "@/components/blog/TOC.astro";
import BaseLayout from "./Base.astro";
import SeriesPanel from "@/components/SeriesPanel.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import { Icon } from "astro-icon/components";

interface Props {
	series: CollectionEntry<"series">;
}

const { series } = Astro.props;
const { title, description } = series.data;

const { headings } = await render(series);

// Add this section to fetch posts for this series
const posts = await getCollection("post");
const seriesPosts = posts
	.filter((p) => p.data.seriesId === series.id)
	.sort((a, b) => (a.data.orderInSeries || 0) - (b.data.orderInSeries || 0));
---

<BaseLayout meta={{ description, title }}>
	<div class="fixed left-0 top-0 z-10 flex h-16 md:h-20 w-full bg-bgColor overflow-hidden">
		<!-- Background 
			TODO: This approach is not optimal and requires improvements. 
  			- Too many absolutely positioned elements can affect performance. 
  		-->	
		<div class="absolute top-0 left-1/2 -ml-[50vw] w-screen min-h-screen pointer-events-none blur-2xl">
			<div class="absolute top-[-90%] right-[25%] w-[75%] h-full bg-gradient-to-b from-blue-300 via-pink-300 to-transparent rounded-full opacity-40 dark:opacity-5"></div>
			<div class="absolute top-[-90%] left-[25%] w-[75%] h-full bg-gradient-to-b from-blue-300 via-pink-300 to-transparent rounded-full opacity-40 dark:opacity-5"></div>
			<div class="absolute top-[-85%] right-[25%] w-[55%] h-full bg-gradient-to-b from-purple-300 via-blue-300 to-transparent rounded-full opacity-40 dark:opacity-5"></div>
			<div class="absolute top-[-85%] left-[25%] w-[55%] h-full bg-gradient-to-b from-indigo-300 via-orange-300 to-transparent rounded-full opacity-40 dark:opacity-5"></div>
			<div class="absolute top-[-75%] left-[-25%] w-[65%] h-full bg-gradient-to-b from-blue-300 via-pink-300 to-transparent rounded-full opacity-30 dark:opacity-5"></div>
			<div class="absolute top-[-75%] right-[-25%] w-[65%] h-full bg-gradient-to-b from-purple-300 via-blue-300 to-transparent rounded-full opacity-30 dark:opacity-5"></div>
			<div class="absolute top-[-85%] left-[-30%] w-[85%] h-full bg-gradient-to-b from-indigo-300 via-orange-300 to-transparent rounded-full opacity-60 dark:opacity-5"></div>
			<div class="absolute top-[-85%] right-[-30%] w-[85%] h-full bg-gradient-to-b from-orange-300 via-indigo-300 to-transparent rounded-full opacity-60 dark:opacity-5"></div>
		</div>
	</div>

	<!-- SeriesPanel –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç "sidebar" -->
	{series.id && (<SeriesPanel slot="sidebar" seriesId={series.id} />)}

	<div class="md:sticky md:top-8 md:z-20 flex items-end">
		<button
			id="toggle-panel"
			class="hidden md:flex z-30 mr-2 h-8 w-8 items-center bg-accent-base/10 flex-shrink-0 justify-center rounded-lg text-accent-base hover:text-accent-base/90"
			aria-label="Toggle Series Panel"
			aria-controls="series-panel"
		>
			{/*
			<Icon aria-hidden="true" class="h-6 w-6" focusable="false" name="hugeicons:sidebar-left" />
			*/}
			<Icon aria-hidden="true" class="flex-shrink-0 h-6 w-6" focusable="false" name="solar:notes-bold" />
		</button>
		<button
			id="toggle-toc"
			class="hidden md:flex z-30 mr-2 h-8 w-8 items-center flex-shrink-0 bg-accent-base/10 justify-center rounded-lg text-accent-base hover:text-accent-base/90"
			aria-label="Table of Contents"
		>	
			<Icon aria-hidden="true" class="h-6 w-6" focusable="false" name="solar:clipboard-list-bold" />
		</button>

		<h1 class="title md:sticky md:top-4 md:z-20 line-clamp-none md:line-clamp-1 md:max-w-lg lg:max-w-xl">
			{title}
		</h1>
	</div>
	<p class="prose prose-citrus max-w-none mt-[1.125rem]">
		{description}
	</p>

	<!-- Add the series posts section here -->
	{seriesPosts.length > 0 && (
		<section class="mt-8">
			<h2 class="title mb-6 flex items-center gap-2">
				<Icon aria-hidden="true" class="h-6 w-6" focusable="false" name="solar:notes-bold" />
				Posts in this Series
			</h2>
			<div class="grid gap-4">
				{seriesPosts.map((post, index) => {
					const { publishDate, updatedDate } = post.data;
					const showUpdatedDate = updatedDate && updatedDate.getTime() > publishDate.getTime();
					
					return (
						<article class="rounded-lg border border-special-light bg-bgColor/50 p-4 hover:bg-bgColor/80 transition-colors">
							<div class="flex items-start gap-3">
								<span class="flex h-8 w-8 items-center justify-center rounded-full bg-accent-base text-sm font-semibold text-bgColor flex-shrink-0 mt-1">
									{index + 1}
								</span>
								<div class="flex-1 min-w-0">
									<div class="flex flex-col sm:flex-row sm:items-start sm:justify-between sm:gap-4">
										<div class="flex-1 min-w-0">
											<h3 class="font-semibold text-accent-base hover:text-accent-two">
												<a href={`/posts/${post.id}/`} class="block">
													{post.data.title}
												</a>
											</h3>
											{post.data.description && (
												<p class="mt-1 text-sm text-light line-clamp-2">
													{post.data.description}
												</p>
											)}
										</div>
										<div class="flex-shrink-0 text-sm text-lighter mt-2 sm:mt-0 sm:text-right">
											<div class="flex items-center gap-1">
												<Icon aria-hidden="true" class="h-3 w-3" focusable="false" name="hugeicons:calendar-03" />
												<FormattedDate
													date={publishDate}
													dateTimeOptions={{
														year: "numeric",
														month: "short",
														day: "2-digit",
													}}
												/>
											</div>
											{showUpdatedDate && (
												<div class="mt-1 text-xs text-accent-two">
													Updated: <FormattedDate
														date={updatedDate}
														dateTimeOptions={{
															year: "numeric",
															month: "short",
															day: "2-digit",
														}}
													/>
												</div>
											)}
										</div>
									</div>
								</div>
								<Icon 
									aria-hidden="true" 
									class="h-5 w-5 text-accent-base flex-shrink-0 mt-1" 
									focusable="false" 
									name="solar:arrow-right-line-duotone" 
								/>
							</div>
						</article>
					)
				})}
			</div>
		</section>
	)}

	<div class="mt-6 flex sm:grid-cols-[auto_1fr] md:items-start gap-x-8">
		<article class="grid flex-grow grid-cols-1 break-words pt-4" data-pagefind-body>
			<div class="prose prose-citrus max-w-none flex-grow prose-headings:font-semibold prose-headings:text-accent-base prose-headings:before:text-accent-two sm:prose-headings:before:content-['#'] sm:prose-th:before:content-none">
				<slot />
			</div>

			<!-- üëá CTA ADDED HERE üëá -->
			<div class="flex justify-center my-6">
				<a href="https://calendar.app.google/VALDzjK7GqCTvYz56" target="_blank" rel="noopener" class="relative flex items-center justify-center min-h-[2.5rem] px-3 py-2 sm:px-6 sm:py-0 sm:h-10 rounded-lg shadow-lg hover:brightness-110 transition-all bg-gradient-to-r from-accent-one to-accent-two">
					<span class="text-bgColor font-semibold text-sm sm:text-base text-center">Schedule Your AI Consultation</span>
				</a>
			</div>
		</article>
		{
			!!headings.length && (
				<aside 
					id="toc-panel" 
					class="sticky md:top-20 z-10 hidden md:w-[16rem] md:min-w-[16rem] rounded-lg md:block"
				>
					<TOC headings={headings} />
				</aside>
			)
		}
	</div>

	<div class="left-0 right-12 z-50 ml-auto w-fit md:absolute">
		<button
			id="to-top-button"
			class="fixed bottom-14 flex h-12 w-12 text-light translate-y-28 items-center justify-center rounded-full border-2 border-special-lighter bg-bgColor text-3xl drop-shadow-xl transition-all duration-300 hover:text-accent-two data-[show=true]:translate-y-0 data-[show=true]:opacity-100"
			aria-label="Back to Top"
			data-show="false"
		>	
			<span class="absolute inset-0 rounded-full bg-special-light flex items-center justify-center" aria-hidden="true">
				<svg
					class="h-6 w-6"
					fill="none"
					focusable="false"
					stroke="currentColor"
					stroke-width="2"
					viewBox="0 0 24 24"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
				</svg>
			</span>
		</button>
	</div>

	<!-- –ö–Ω–æ–ø–∫–∞ —Å–µ—Ä–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ -->
	<mobile-button
		id="toggle-panel-mobile"
		class="size-12 flex items-center justify-center block sm:hidden fixed bottom-4 shadow-[0px_10px_25px_rgba(0,0,0,0.15)] border border-special-lighter right-4 z-50 rounded-lg bg-bgColor text-accent-base hover:text-bg-accent-base/90"
		aria-label="Toggle Series Panel"
	>
		<span class="absolute inset-0 rounded-lg flex items-center justify-center bg-special-light hover:text-accent-base/90">
			<Icon class="size-8" name="solar:notes-bold"/>
		</span>
	</mobile-button>

	<!-- –ö–Ω–æ–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ -->
	<!--
	<mobile-button
		id="toggle-toc-mobile"
		class="size-12 flex items-center justify-center block sm:hidden fixed bottom-20 shadow-[0px_10px_25px_rgba(0,0,0,0.15)] border border-special-lighter right-4 z-50 rounded-lg bg-bgColor text-accent-base hover:text-bg-accent-base/90"
		aria-label="Toggle TOC Panel"
	>
		<span class="absolute inset-0 rounded-lg flex items-center justify-center bg-special-light hover:text-accent-base/90">
			<Icon class="size-8" name="solar:clipboard-list-bold"/>
		</span>
	</mobile-button>
	-->
</BaseLayout>

<script>
	const ANIMATION_DURATION = 300;
	// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏ –ø–∞–Ω–µ–ª–∏
	const togglePanelBtn = document.getElementById("toggle-panel");
	const closePanelBtn = document.getElementById("close-panel");
	const seriesPanel = document.getElementById("series-panel");
	const togglePanelMobileBtn = document.getElementById("toggle-panel-mobile");

	// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ seriesPanel —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if (!seriesPanel) {
		console.error("–≠–ª–µ–º–µ–Ω—Ç series-panel –Ω–µ –Ω–∞–π–¥–µ–Ω");
		throw new Error("series-panel is required");
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤–∏–¥–∏–º–∞ –ª–∏ –ø–∞–Ω–µ–ª—å
	const isPanelVisible = () => {
		const isScreenLg = window.matchMedia("(min-width: 1024px)").matches; // –ë–æ–ª—å—à–∏–µ —ç–∫—Ä–∞–Ω—ã
		return (
			(isScreenLg && seriesPanel.classList.contains("lg:block")) ||
			(!isScreenLg && !seriesPanel.classList.contains("hidden"))
		);
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
	const hidePanel = () => {
		seriesPanel.classList.add("opacity-0", "-translate-x-full");
		setTimeout(() => {
			seriesPanel.classList.remove("block", "lg:block");
			seriesPanel.classList.add("hidden");
		}, ANIMATION_DURATION);
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–∞–Ω–µ–ª–∏
	const showPanel = () => {
		seriesPanel.classList.remove("hidden");
		seriesPanel.classList.add("block", "lg:block");
		setTimeout(() => {
			seriesPanel.classList.remove("opacity-0", "-translate-x-full");
		}, 10);
	};

	// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–µ–∏—Ö –∫–Ω–æ–ø–æ–∫
	const togglePanel = () => {
		if (isPanelVisible()) {
			hidePanel(); // –ï—Å–ª–∏ –≤–∏–¥–∏–º–∞, —Å–∫—Ä—ã–≤–∞–µ–º
		} else {
			showPanel(); // –ï—Å–ª–∏ —Å–∫—Ä—ã—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
		}
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–µ–∏—Ö –∫–Ω–æ–ø–æ–∫
	if (togglePanelBtn) {
		togglePanelBtn.addEventListener("click", togglePanel);
	} else {
		console.error("–≠–ª–µ–º–µ–Ω—Ç toggle-panel –Ω–µ –Ω–∞–π–¥–µ–Ω");
	}

	if (togglePanelMobileBtn) {
		togglePanelMobileBtn.addEventListener("click", togglePanel);
	} else {
		console.error("–≠–ª–µ–º–µ–Ω—Ç toggle-panel-mobile –Ω–µ –Ω–∞–π–¥–µ–Ω");
	}

	if (closePanelBtn) {
		closePanelBtn.addEventListener("click", hidePanel);
	} else {
		console.error("–≠–ª–µ–º–µ–Ω—Ç close-panel –Ω–µ –Ω–∞–π–¥–µ–Ω");
	}
</script>

<script>
	// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏ –ø–∞–Ω–µ–ª–∏
	const toggleTocBtn = document.getElementById('toggle-toc');
	const closeTocBtn = document.getElementById('close-toc');
	const tocPanel = document.getElementById('toc-panel');
	const toggleTocMobileBtn = document.getElementById("toggle-toc-mobile");

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–Ω–µ–ª–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã)
	if (!tocPanel) {
		console.error('–≠–ª–µ–º–µ–Ω—Ç toc-panel –Ω–µ –Ω–∞–π–¥–µ–Ω');
		throw new Error('toc-panel is required');
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤–∏–¥–∏–º–∞ –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	const isTocVisible = () => {
		const isScreenMd = window.matchMedia("(min-width: 768px)").matches;
		return (
			(isScreenMd && tocPanel.classList.contains("md:block")) ||
			(!isScreenMd && !tocPanel.classList.contains("hidden"))
		);
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
	const hideToc = () => {
		tocPanel.classList.add('hidden');
		tocPanel.classList.remove('md:block');
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–∞–Ω–µ–ª–∏
	const showToc = () => {
		tocPanel.classList.remove('hidden');
		tocPanel.classList.add('md:block');
	};

	// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–µ–∏—Ö –∫–Ω–æ–ø–æ–∫
	const toggleToc = () => {
		if (isTocVisible()) {
			hideToc(); // –ï—Å–ª–∏ –≤–∏–¥–∏–º–∞, —Å–∫—Ä—ã–≤–∞–µ–º
		} else {
			showToc(); // –ï—Å–ª–∏ —Å–∫—Ä—ã—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
		}
	};
	
	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
	if (toggleTocBtn) {
		toggleTocBtn.addEventListener("click", toggleToc);
	} else {
		console.error('–≠–ª–µ–º–µ–Ω—Ç toggle-toc –Ω–µ –Ω–∞–π–¥–µ–Ω');
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
	if (toggleTocMobileBtn) {
		toggleTocMobileBtn.addEventListener("click", toggleToc);
	} else {
		console.error('–≠–ª–µ–º–µ–Ω—Ç toggle-toc-mobile –Ω–µ –Ω–∞–π–¥–µ–Ω');
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
	if (closeTocBtn) {
		closeTocBtn.addEventListener('click', hideToc);
	} else {
		console.error('–≠–ª–µ–º–µ–Ω—Ç close-toc –Ω–µ –Ω–∞–π–¥–µ–Ω');
	}
</script>

<script>
  // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  document.addEventListener("DOMContentLoaded", () => {
    const buttonsPanel = document.getElementById("buttons-panel");
    
    if (buttonsPanel) {
      buttonsPanel.classList.add("fixed");
      console.log("–ö–ª–∞—Å—Å 'fixed' –¥–æ–±–∞–≤–ª–µ–Ω –∫ —ç–ª–µ–º–µ–Ω—Ç—É buttons-panel.");
    } else {
      console.error("–≠–ª–µ–º–µ–Ω—Ç —Å ID 'buttons-panel' –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  });
</script>

<script>
	const scrollBtn = document.getElementById("to-top-button") as HTMLButtonElement;
	const targetHeader = document.querySelector("header") as HTMLElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// Show the scroll to top button when the <header> is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>
